'''
题目描述：
    牛牛有一些字母卡片,每张卡片上都有一个小写字母,所有卡片组成一个字符串s。牛牛一直认为回文这种性质十分优雅,于是牛牛希望用这些卡片拼凑出一些回文串,但是有以下要求:
    1、每张卡片只能使用一次
    2、要求构成的回文串的数量最少
    牛牛想知道用这些字母卡片,最少能拼凑出多少个回文串。
    例如: s = "abbaa",输出1,因为最少可以拼凑出"ababa"这一个回文串
    s = "abc", 输出3,因为最少只能拼凑出"a","b","c"这三个回文串
输入描述:
    输入包括一行,一个字符串s,字符串s长度length(1 ≤ length ≤ 1000).
    s中每个字符都是小写字母
输出描述:
    输出一个整数,即最少的回文串个数。
示例1
输入
    abc
输出
    3
分析思路：
    我们知道回文串的话，就是前后相等，那么一个字符至少出现两次，
    除了一种情况，就是可以有一个字符只出现一次，就是这个字符在中间。
    所以，我们的思路就是统计出现奇数次字符的个数，
    假设只出现一个奇数次字符，那么其他都是偶数次的，那么直接奇数次的放中间就行了，所以至少是一种，如果没出现更好，也是一种，
    如果出现两个奇数次字符，那么一个拿去放中间，另一个只能单独领出来作为一个回文串，所以至少要两种，
    如果出现三个奇数次字符，那么就至少要三种。
    所以问题就变成统计奇数次字符出现的个数


'''

if __name__ == '__main__':
    str = input()
    count_list = [0] * 26
    # print(count_list)

    for i in str:
        count_list[ ord(i) - ord('a')] += 1

    # print(count_list)
    ans = 0
    for i in count_list:
        if i % 2 == 1:
            ans += 1
    if ans == 0:
        ans += 1

    print(ans)

